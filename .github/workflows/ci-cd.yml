name: AestheticAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ==================== FRONTEND TESTS ====================
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build application
      run: npm run build
      env:
        REACT_APP_API_URL: http://localhost:8000

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build
        retention-days: 7

  # ==================== BACKEND TESTS ====================
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: aesthetic_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Run linting
      run: |
        pip install flake8 black
        flake8 . --max-line-length=88 --exclude=__pycache__,venv
        black --check .

    - name: Run type checking
      run: |
        pip install mypy
        mypy . --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/aesthetic_test
        SECRET_KEY: test-secret-key-for-ci
        USE_GPU: false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: ./backend/htmlcov
        retention-days: 7

  # ==================== E2E TESTS ====================
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build

    - name: Start backend server
      working-directory: ./backend
      run: |
        python run.py &
        sleep 10
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key-for-e2e
        USE_GPU: false

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm start &
        sleep 15
      env:
        REACT_APP_API_URL: http://localhost:8000

    - name: Run Cypress E2E tests
      working-directory: ./frontend
      run: npx cypress run
      env:
        CYPRESS_baseUrl: http://localhost:3000

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: ./frontend/cypress/screenshots
        retention-days: 7

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: ./frontend/cypress/videos
        retention-days: 7

  # ==================== SECURITY SCAN ====================
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Frontend security audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high
        
    - name: Backend security check
      working-directory: ./backend
      run: |
        pip install safety bandit
        safety check
        bandit -r . -f json -o bandit-report.json

  # ==================== BUILD DOCKER IMAGES ====================
  build-docker:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          your-dockerhub-username/aesthetic-ai-backend:latest
          your-dockerhub-username/aesthetic-ai-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          your-dockerhub-username/aesthetic-ai-frontend:latest
          your-dockerhub-username/aesthetic-ai-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ==================== DEPLOY TO STAGING ====================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan, build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Ici, vous ajouteriez les commandes de déploiement réelles
        # Par exemple: kubectl apply, helm upgrade, etc.

  # ==================== DEPLOY TO PRODUCTION ====================
  deploy-production:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan, build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Commandes de déploiement en production

  # ==================== PERFORMANCE TESTS ====================
  performance-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install locust
      run: pip install locust

    - name: Run performance tests
      run: |
        locust -f backend/tests/performance/locustfile.py \
               --host=https://staging.aesthetic-ai.com \
               --users=50 \
               --spawn-rate=5 \
               --run-time=5m \
               --html=performance-report.html \
               --headless

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # ==================== CLEANUP ====================
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary resources..."
        # Nettoyage des ressources temporaires si nécessaire
