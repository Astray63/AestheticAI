"""
Application principale AestheticAI
Point d'entr√©e FastAPI modernis√© avec architecture modulaire
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import logging
from contextlib import asynccontextmanager

from app.core.config import settings
from app.core.database import create_tables
from app.services.ai_generator import ai_service
from app.api import auth_router, patients_router, simulations_router, main_router

# Configuration du logging
logging.basicConfig(
    level=logging.INFO if not settings.debug else logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application"""
    # Startup
    logger.info(f"D√©marrage de {settings.app_name} v{settings.app_version}")
    logger.info(f"Environnement: {settings.environment}")
    logger.info(f"Device IA: {settings.device}")
    
    # Cr√©er les tables de base de donn√©es
    create_tables()
    logger.info("Tables de base de donn√©es cr√©√©es")
    
    # Initialiser les mod√®les IA en arri√®re-plan
    try:
        await ai_service.initialize_models()
        logger.info("Mod√®les IA initialis√©s")
    except Exception as e:
        logger.warning(f"Erreur lors de l'initialisation IA: {e}")
    
    yield
    
    # Shutdown
    logger.info("Arr√™t de l'application")
    await ai_service.cleanup()


# Cr√©er l'application FastAPI
app = FastAPI(
    title=settings.app_name,
    description="""
    üåü **AestheticAI** - Plateforme SaaS de M√©decine Esth√©tique avec IA

    API moderne pour la simulation d'interventions esth√©tiques utilisant
    l'intelligence artificielle g√©n√©rative (Stable Diffusion + ControlNet).

    ## Fonctionnalit√©s

    * üîê **Authentification s√©curis√©e** avec codes PIN et JWT
    * üë• **Gestion des patients** anonymis√©e (conforme RGPD)
    * ü§ñ **Simulations IA** pour visualiser les r√©sultats avant intervention
    * üìä **Statistiques et suivi** des interventions
    * üè• **Interface professionnelle** d√©di√©e aux professionnels de sant√©

    ## Types d'interventions support√©es

    * Augmentation des l√®vres
    * Red√©finition des pommettes
    * Remodelage du menton
    * Traitement des rides (front, pattes d'oie)

    ## S√©curit√©

    * Authentification JWT avec codes PIN
    * Donn√©es patients anonymis√©es
    * Conformit√© RGPD
    * Chiffrement des donn√©es sensibles
    """,
    version=settings.app_version,
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir les fichiers upload√©s
app.mount("/uploads", StaticFiles(directory=settings.upload_dir), name="uploads")

# Inclure les routers
app.include_router(main_router)
app.include_router(auth_router, prefix="/api")
app.include_router(patients_router, prefix="/api")
app.include_router(simulations_router, prefix="/api")

# Router pour les abonnements (√† importer depuis l'ancien code si n√©cessaire)
try:
    from subscription_api import router as subscription_router
    app.include_router(subscription_router, prefix="/api")
    logger.info("Router d'abonnements inclus")
except ImportError:
    logger.warning("Router d'abonnements non trouv√©")


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
        log_level="info" if not settings.debug else "debug"
    )
